createtestcase.exec('createtestcase.exe', { cwd: buildFolder }, function(err, stdout, stderr) {
                                                if (err) return console.log(err);
                                                else {
                                                    setTimeout(function() {
                                                        let xmlCompile = require('./xml_compile.js');
                                                        let sumpoint = 0;
                                                        xmlCompile.readXmlAndCompile(id, now_submit, function(error, success) {
                                                            if (error) {
                                                                result(error, null);
                                                                fs.unlinkSync(newfolder + '/' + id + '.exe');
                                                                fs.writeFile(buildFolder + '/fault.txt', error, function(err) {
                                                                    if (err) return console.log(err);
                                                                });
                                                            } else {
                                                                rename.moveFile(newfolder + '/' + id + '.exe', newfolder + '/build/' + id + '.exe', function() {
                                                                    let tempdir = TempFolderExecute;
                                                                    db.copyandrename(buildFolder, 'input1.txt', tempdir, 'input.txt', function() {
                                                                        xmlCompile.runExeFile(id, now_submit, function(err, success) {
                                                                            if (err) {
                                                                                result(err, sumpoint);
                                                                                fs.writeFile(buildFolder + '/fault.txt', err, function(err2) {
                                                                                    if (err2) console.log(err2);
                                                                                });
                                                                            } else {
                                                                                xmlCompile.grading(id, now_submit, '1', function(point1) {
                                                                                    rename.moveFile(buildFolder + '/outputX.txt', buildFolder + '/outputX1.txt', function() {
                                                                                        sumpoint += 0.3 * Number(point1);
                                                                                        db.copyandrename(buildFolder, 'input2.txt', tempdir, 'input.txt', function() {
                                                                                            xmlCompile.runExeFile(id, now_submit, function(err1, success1) {
                                                                                                if (err1) {
                                                                                                    result(err1, sumpoint);
                                                                                                    fs.writeFile(buildFolder + '/fault.txt', err1, function(err3) {
                                                                                                        if (err3) console.log(err3);
                                                                                                    });
                                                                                                } else {
                                                                                                    xmlCompile.grading(id, now_submit, '2', function(point2) {
                                                                                                        rename.moveFile(buildFolder + '/outputX.txt', buildFolder + '/outputX2.txt', function() {
                                                                                                            sumpoint += 0.7 * Number(point2);
                                                                                                            result(null, sumpoint);
                                                                                                        });
                                                                                                    });
                                                                                                }
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            }
                                                                        });
                                                                    });
                                                                });
                                                            }

                                                        });
                                                    }, 2000);

                                                    rename.copyFile(sourceCreatetestcase + 'runtestcase.exe', buildFolder, function() {
                                                        let runtestcase = require('child_process');
                                                        runtestcase.exec('runtestcase.exe <input1.txt> result1.txt', { cwd: buildFolder + '/' }, function(err, stdout, stderr) {
                                                            if (err) return console.log(err);
                                                            else {
                                                                runtestcase.exec('runtestcase.exe <input2.txt> result2.txt', { cwd: buildFolder + '/' }, function(err, stdout, stderr) {
                                                                    if (err) return console.log(err);
                                                                    else {

                                                                    }
                                                                });
                                                            }
                                                        });
                                                    });
                                                }
                                            });




---------------------------------------------------------------------------------------------------------

unzipFileSubmit: function(id, result) {
        let db=require('./testdatabase.js');
        db.GetTimesSubmitOfStudent(id, function(times_submit) {
            let now_submit = Number(times_submit) + 1;
            let oldpath =DataFolder+'/' + id + '/' + id + '.zip';
            let newpath = DataFolder+'/' + id + '/submit' + now_submit + '.zip';
            let tempfolder = DataFolder+'/' + id + '/temp';
            copyandmove.moveFile(oldpath, newpath, function() {
                let extract = require('extract-zip');
                extract(newpath, { dir: tempfolder }, function(err) {
                    if (err) return console.log(err);
                    else {
                        console.log('extract file successfully !');
                        let newfolder = DataFolder+'/' + id + '/submit' + now_submit;
                        let sourcefile = DataFolder+'/' + id + '/submit' + now_submit;
                        db.editNameAfterUnzip(tempfolder, sourcefile, function() {
                          let DataStudent =DataStudentFolder+'/'+DataStudentFile;
                          db.editCellInData(id, DataStudent, 2, now_submit, function() {
                            db.getListWeightOfTopic(nowTopic,function(arr_testcase){
                              db.prepareTestcase(id,now_submit,arr_testcase,function(){
                                    console.log('createtestcase !');

                                    });
                                });
                            });
                        });
                    }
                });
            });
        });
    },

---------------------------------------------------------------------------------------------------------

createXmlFileFromFolder: function(id, onsuccess) {
        let db=require('./testdatabase.js');
        db.GetTimesSubmitOfStudent(id, function(times_submit) {
            let desfile = './Data/' + id + '/submit' + times_submit;
            fs.readdir(desfile, function(err, files) {
                if (err) return console.log(err);
                let xmlbuild = require('xmlbuilder');
                let xmlfile = xmlbuild.create('project');
                for (let i = 0; i < files.length; ++i) {
                    let separate = files[i].split('.');
                    if (separate[1] == 'h') {
                        xmlfile.ele('header_files').txt(files[i]);
                    } else if (separate[1] == 'cpp' && separate[0] != 'main') {
                        xmlfile.ele('source_files').txt(files[i]);
                    } else if (separate[0] == 'main') {
                        xmlfile.ele('main').txt(files[i]);
                    }
                }
                let data = xmlfile.toString({
                    pretty: true
                });
                let filename =XmlFile;
                fs.writeFile(desfile + '/' + filename, data, function(err) {
                    if (err) return console.log(err);
                    onsuccess();
                });
            });
        });
    },

---------------------------------------------------------------------------------------------------------
     getFileResult: function(id, success) {
        let db=require('./testdatabase.js');
        db.GetTimesSubmitOfStudent(id, function(times_submit) {
            let buildFolder = __dirname + "/Data/" + id + "/submit" + times_submit + '/build';
            let result1;let result2;let result3;
            if (fs.existsSync(buildFolder + '/outputX1.txt')) {
                result1 = fs.readFileSync(buildFolder + '/outputX1.txt', 'utf8');
            } else result1 = '';
            if (fs.existsSync(buildFolder + '/outputX2.txt')) {
                result2 = fs.readFileSync(buildFolder + '/outputX2.txt', 'utf8');
            } else result2 = '';
            if (fs.existsSync(buildFolder + '/fault.txt')) {
                result3 = fs.readFileSync(buildFolder + '/fault.txt', 'utf8');
            } else result3 = '';
            let filedata = './DataStudent/Danhsachsinhvien.csv';
            db.getCellInData(id, filedata, '3', function(point) {
                success(result1, result2, result3, point);
            });
        });
    },

---------------------------------------------------------------------------------------------------------
db.createXmlFileFromFolder(id, function() {
         let fs = require('fs');
         let buildFolder = DataFolder+'/' + id + '/submit' + now_submit + '/build';
         fs.mkdirSync(buildFolder);
         let sourceCreatetestcase =PublicFolder+'/';
         rename.copyFile(sourceCreatetestcase + 'createtestcase.exe', buildFolder, function() {
           rename.copyFile(sourceCreatetestcase + 'libstdc++-6.dll', buildFolder, function() {
             setTimeout(success(),1500);
             let createtestcase = require('child_process');
                for(let i=0;i<arr_testcase.length;++i){
                    createtestcase(CreateTestcaseFile+' >'+PrefixOfInputFile+i+'.txt',{ cwd: buildFolder }, function(err, stdout, stderr){
                        if(err) console.log(err);
                      });
                    }
                });
            });
        });

---------------------------------------------------------------------------------------------------------

let string_testcase='';let arr_testcase;
       linereader.eachLine(DataStudentFolder+'/'+PrefixOfWeight+numtopic+'.txt',function(line,last){
          string_testcase+=line+' ';
          if(last){
             arr_testcase=string_testcase.split(' ');onsuccess(arr_testcase);
          }
       });

---------------------------------------------------------------------------------------------------------